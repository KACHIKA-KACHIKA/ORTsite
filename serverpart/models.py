from django.db import models
from django.contrib.auth.models import User
from PIL import Image
# Модель для тем
class TaskKeys(models.Model):
    PART_CHOICES = (
        ('Часть 1', 'Часть 1'),
        ('Часть 2', 'Часть 2'),
    )

    SECTION_CHOICES = (
        (1, 'Арифметика'),
        (2, 'Алгебра'),
        (3, 'Геометрия'),
    )

    THEME_CHOICES = (
        ('00', 'Без темы'),
        ('01', 'Числа простые и составные. Разложение числа на простые множители. Делитель и кратное. Признаки делимости чисел. Наибольший общий делитель, наименьшее общее кратное. '),
        ('02', 'Рациональные числа. Свойства арифметических действий.'),
        ('03', 'Иррациональные выражения. Арифметический корень, действия с корнями. '),
        ('04', 'Арифметические действия с положительными и отрицательными числами. '),
        ('05', 'Обыкновенные дроби. Арифметические действия с обыкновенными дробями. Представление обыкновенных дробей десятичными дробями.'),
        ('06', 'Отношение. Пропорции. Проценты.'),
        ('07', 'Степень с натуральным и целым показателями. Квадратный корень. '),
        ('08', 'Приближенные значения величин. Округление чисел. '),
        ('09', 'Числовые неравенства и их свойства.'),
        
        ('10', 'Тождественные преобразования алгебраических выражений.'),
        ('11', 'Выражения, содержащие модуль. '),
        ('12', 'Алгебраическая дробь. Действия с алгебраическими дробями.'),
        ('13', 'Свойства степени с целым показателем. '),
        ('14', 'Свойства арифметического квадратного корня. Преобразование выражений, содержащих квадратные корни.'),
        ('15', 'Многочлены. Действия с многочленами. Формулы сокращенного умножения. Разложение многочленов на множители. '),
        ('16', 'Логарифмы, их свойства. Тождественные преобразования логарифмических и показательных выражений. '),
        ('17', 'Уравнения алгебраические, логарифмические, показательные, тригонометрические, иррациональные. '),
        ('18', 'Системы двух линейных уравнений с двумя переменными.'),
        ('19', 'Неравенства и их свойства. '),
        ('20', 'Функция. Способы задания функции. Область определения функции. '),
        ('21', 'Графики элементарных функций и их свойства.'),
        
        ('22', 'Свойства параллельных и перпендикулярных прямых. '),
        ('23', 'Треугольник.'),
        ('24', 'Виды треугольников. Свойства сторон и углов треугольника. '),
        ('25', 'Теорема Пифагора. Синус, косинус, тангенс острого угла. Решение прямоугольных треугольников. '),
        ('26', 'Четырехугольники. '),
        ('27', 'Окружность и круг. Центральные и вписанные углы. Окружность, вписанная в треугольник. Окружность, описанная около треугольника. '),
        ('28', 'Длина окружности, площадь круга. '),
        ('29', 'Площадь и периметр треугольника и четырехугольника. '),
        ('30', 'Площадь боковых поверхностей цилиндра, конуса, шара. Площадь сферы.'),
        ('31', 'Площади поверхностей призмы и пирамиды. '),
        ('32', 'Формулы объемов прямоугольного параллелепипеда, прямой призмы, пирамиды, цилиндра, конуса, шара. '),
        ('33', 'Декартовы координаты на плоскости.'),
        ('34', 'Декартовы координаты в пространстве.'),
        ('35', 'Движение.'),
        ('36', 'Осевая симметрия. Центральная симметрия.'),
        # Добавьте остальные темы
    )

    DIFFICULTY_CHOICES = (
        (0, 'Любая сложность'),
        (1, 'Легкий'),
        (2, 'Средний'),
        (3, 'Тяжелый'),
    )

    part = models.CharField(max_length=10, choices=PART_CHOICES)  # Часть
    section = models.IntegerField(choices=SECTION_CHOICES)  # Раздел
    theme = models.CharField(max_length=2, choices=THEME_CHOICES, default='00')  # Тема
    difficulty = models.IntegerField(choices=DIFFICULTY_CHOICES, default=0)  # Уровень сложности

    def __str__(self):
        return f"Тема: {self.get_section_display()} - {self.get_theme_display()} ({self.get_difficulty_display()})"
    class Meta:
        verbose_name = 'TaskKeys'
        verbose_name_plural = verbose_name

# Модель для заданий
class Tasks(models.Model):
    task_key = models.ForeignKey(TaskKeys, on_delete=models.CASCADE)  # Связь с моделью Topic
    task_image = models.ImageField(upload_to='task_images/', null=True, blank=True)  # Изображение задания
    solution_image = models.ImageField(upload_to='solution_images/', null=True, blank=True)  # Изображение с решением
    answer_text = models.TextField(null=True, blank=True)  # Текстовое поле для хранения ответа

    def __str__(self):
        return f"Задание: {self.task_key} ({self.TaskKeys.get_part_display()})"
    class Meta:
        verbose_name = 'Tasks'
        verbose_name_plural = verbose_name

# Модель для решенных задач
class SolvedTasks(models.Model):
    user = models.ForeignKey(User, on_delete=models.CASCADE)  # Связь с пользователем
    task = models.ForeignKey(Tasks, on_delete=models.CASCADE)  # Связь с заданием

    def __str__(self):
        return f"Пользователь: {self.user.username}, Задание: {self.task.topic} ({self.task.get_part_display()})"
    class Meta:
        verbose_name = 'SolvedTasks'
        verbose_name_plural = verbose_name
